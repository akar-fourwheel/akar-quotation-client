export function buildQuotationData({
  name, phoneNo, email, address, selectedSalesPerson, cxId, cxAllot, inhouse, selectedHpn, hpn,
  finalData, selectedColor, selectedDiscounts, addExc, loyalty, loyaltyType, corpOffer, addDisc, mdmrDisc, sss,
  totalDisc, tcs, rto, scrap, cod, selectedAcc, accTotal, ins, selectedInsurance, totalAddOns, ew,
  selectedVas, totalESP 
}) {
  const cameraOption = selectedAcc.find(
      (opt) => opt.label == "Camera" || opt.label == "TFT Display Camera"
    )
  return {
      userInfo: {
        name: name.toUpperCase(),
        mobile: phoneNo,
        email: email,
        address: address, 
        salesPerson: selectedSalesPerson,
      },
      sheetData: {
        cx_id:cxId,
        alot_id:cxAllot,
        HPN: (inhouse ? selectedHpn.label + ": In-House" : hpn + ": Out-House"),
        year: finalData.YEAR,
        model: finalData.PPL,
        fuel: finalData.Fuel,
        varient: finalData.Variant,
        color: selectedColor ? selectedColor : "N/A",
        ESP: finalData.ESP,
        consumerDisc: (selectedDiscounts.some((opt) => opt.value === "CONSUMER") ? finalData.CONSUMER : 0),
        interventionDisc: (selectedDiscounts.some((opt) => opt.value === "INTERVENTION") ? finalData.INTERVENTION : 0),
        exchangeScrap: (selectedDiscounts.some((opt) => opt.value === "EXCHANGE") ? finalData.EXCHANGE : 0),
        addExcDisc: addExc,
        loyalty: (!loyalty || loyalty == 0 ? false : true),
        ICEtoEV: (loyaltyType == 'ICE_to_EV' && finalData[loyaltyType]),
        EVtoEV: (loyaltyType == 'EV_to_EV' && finalData[loyaltyType]),
        corpTop10Disc: (selectedDiscounts.some((opt) => opt.value === "CORPORATE_TOP_10") ? finalData["CORPORATE_TOP_10"] : 0),
        corpTop20Disc: (selectedDiscounts.some((opt) => opt.value === "CORPORATE_TOP_20") ? finalData["CORPORATE_TOP_20"] : 0),
        corpOfferToggle: (finalData[corpOffer] > 0 ? true : false),
        solarDisc: ((corpOffer === "SOLER") ? finalData.SOLER : 0),
        MSMEDisc: ((corpOffer === "MSME") ? finalData.MSME : 0),
        gridDisc: (selectedDiscounts.some((opt) => opt.value === "GRID") ? finalData.GRID : 0),
        addDisc: addDisc,
        mdmrDisc: mdmrDisc,
        SSS: sss,
        totalDisc: totalDisc,
        billingPrice: finalData.ESP - totalDisc,
        tcs: tcs,
        rtoType: rto.value,
        rtoAmt: finalData[rto.value].toFixed(2),
        scrapBy: (scrap ? "Dealer" : rto.value == "Scrap_RTO" ? "Self" : "N/A"),
        cod: cod,
        mudflap: (selectedAcc.some((opt) => opt.label === "Mudflap") ? selectedAcc.find((opt) => opt.label === "Mudflap").value : 0),
        uniMatting: (selectedAcc.some((opt) => opt.label === "Universal Matting") ? selectedAcc.find((opt) => opt.label === "Universal Matting").value : 0),
        seatCover: (selectedAcc.some((opt) => opt.label === "Seat Cover") ? selectedAcc.find((opt) => opt.label === "Seat Cover").value : 0),
        doorVisor: (selectedAcc.some((opt) => opt.label === "Door Visor") ? selectedAcc.find((opt) => opt.label === "Door Visor").value : 0),
        doorEdge: (selectedAcc.some((opt) => opt.label === "Door Edge Guard") ? selectedAcc.find((opt) => opt.label === "Door Edge Guard").value : 0),
        bsm: (selectedAcc.some((opt) => opt.label === "BSM") ? selectedAcc.find((opt) => opt.label === "BSM").value : 0),
        scuffPlate: (selectedAcc.some((opt) => opt.label === "Scuff Plate") ? selectedAcc.find((opt) => opt.label === "Scuff Plate").value : 0),
        sideStep: (selectedAcc.some((opt) => opt.label === "Side Step") ? selectedAcc.find((opt) => opt.label === "Side Step").value : 0),
        mat7D: (selectedAcc.some((opt) => opt.label === "7 D Mat") ? selectedAcc.find((opt) => opt.label === "7 D Mat").value : 0),
        trunkMat: (selectedAcc.some((opt) => opt.label === "Trunk Mat") ? selectedAcc.find((opt) => opt.label === "Trunk Mat").value : 0),
        perfume: (selectedAcc.some((opt) => opt.label === "Perfume") ? selectedAcc.find((opt) => opt.label === "Perfume").value : 0),
        ganeshji: (selectedAcc.some((opt) => opt.label === "Ganesh Ji") ? selectedAcc.find((opt) => opt.label === "Ganesh Ji").value : 0),
        camera: (cameraOption ? cameraOption.label : " "),
        cameraVal: (cameraOption ? cameraOption.value : 0),
        bodyCover: (selectedAcc.some((opt) => opt.label === "Car Cover") ? selectedAcc.find((opt) => opt.label === "Car Cover").value : 0),
        accTotal: accTotal,
        inc: ins,
        rsa: (selectedInsurance.some((opt) => opt.value === "RSA") ? finalData["RSA"] : 0),
        keyRep: (selectedInsurance.some((opt) => opt.value === "Key_Replacement") ? finalData["Key_Replacement"] : 0),
        engineProtect: (selectedInsurance.some((opt) => opt.value === "Engine_Protection") ? finalData["Engine_Protection"] : 0),
        rti: (selectedInsurance.some((opt) => opt.value === "RTI") ? finalData["RTI"] : 0),
        tyreNcover: (selectedInsurance.some((opt) => opt.value === "Tyre_and_Alloy_Cover") ? finalData["Tyre_and_Alloy_Cover"] : 0),
        consumables: (selectedInsurance.some((opt) => opt.value === "Consumables") ? finalData["Consumables"] : 0),
        personalBelong: (selectedInsurance.some((opt) => opt.value === "Personal_Belongings") ? finalData["Personal_Belongings"] : 0),
        batteryP: (selectedInsurance.some((opt) => opt.value === "Battery_Protection") ? finalData["Battery_Protection"] : 0),
        incTotal: totalAddOns + ins,
        ewType: ew ? ew : "",
        ew: ew ? finalData[ew] : 0,
        vasType: selectedVas ? selectedVas.label : "",
        vas: selectedVas ? selectedVas.value : 0,
        fasttag: finalData.FastTag,
        grandTotal: totalESP,
      }
    };
}